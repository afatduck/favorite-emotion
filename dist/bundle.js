/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Cell.ts":
/*!*********************!*\
  !*** ./src/Cell.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Cell: () => (/* binding */ Cell)\n/* harmony export */ });\n/* harmony import */ var _stateManagement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stateManagement */ \"./src/stateManagement.ts\");\n\nclass Cell {\n    constructor(id, pos, emotion) {\n        this.pos = pos;\n        this.emotion = emotion;\n        this.links = [];\n        this.id = id;\n        this.immune = 0;\n    }\n    render(ctx) {\n        if (this.emotion && this.emotion.id === _stateManagement__WEBPACK_IMPORTED_MODULE_0__.gsSelectedEmotion.get().id) {\n            ctx.beginPath();\n            ctx.fillStyle = this.emotion.colour + '55';\n            ctx.arc(this.pos.x, this.pos.y, 15, 0, Math.PI * 2);\n            ctx.fill();\n            ctx.closePath();\n        }\n        ctx.beginPath();\n        ctx.fillStyle = 'black';\n        ctx.arc(this.pos.x, this.pos.y, 8, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.closePath();\n        ctx.beginPath();\n        ctx.fillStyle = this.emotion ? this.emotion.colour : '#444';\n        ctx.arc(this.pos.x, this.pos.y, 7, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.closePath();\n    }\n    renderLinks(ctx) {\n        this.links.forEach(({ cell, rendered }) => {\n            if (!rendered) {\n                ctx.beginPath();\n                ctx.moveTo(this.pos.x, this.pos.y);\n                ctx.lineTo(cell.pos.x, cell.pos.y);\n                ctx.strokeStyle = 'lightgray';\n                ctx.lineWidth = 4;\n                ctx.stroke();\n                ctx.closePath();\n            }\n        });\n    }\n    link(cell) {\n        const newCellId = cell.id;\n        const alreadyLinked = this.links.some(({ cell }) => cell.id === newCellId);\n        if (!alreadyLinked) {\n            this.links.push({\n                cell,\n                rendered: false\n            });\n            cell.link(this);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://fav-emotion/./src/Cell.ts?");

/***/ }),

/***/ "./src/generateCells.ts":
/*!******************************!*\
  !*** ./src/generateCells.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateCells: () => (/* binding */ generateCells),\n/* harmony export */   getCells: () => (/* binding */ getCells),\n/* harmony export */   layerCount: () => (/* binding */ layerCount),\n/* harmony export */   layerDistance: () => (/* binding */ layerDistance)\n/* harmony export */ });\n/* harmony import */ var _Cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Cell */ \"./src/Cell.ts\");\n/* harmony import */ var _generateEmotions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generateEmotions */ \"./src/generateEmotions.ts\");\n\n\nconst layerCount = 8;\nconst layerDistance = 60;\nconst spreadFrom = 6;\nconst cells = [];\nconst layers = [];\nlet c = 0;\nconst generateCells = () => {\n    var _a, _b, _c;\n    cells.length = 0;\n    layers.length = 0;\n    const emotions = (0,_generateEmotions__WEBPACK_IMPORTED_MODULE_1__.getEmotions)();\n    const emotionCount = emotions.length;\n    for (let i = 0; i <= layerCount; i++) {\n        const newLayer = [];\n        const dense = Math.max(0, i - 3);\n        const spreads = i >= spreadFrom;\n        if (i === 0) {\n            const newCell = new _Cell__WEBPACK_IMPORTED_MODULE_0__.Cell(c++, { x: 0, y: 0 }, null);\n            cells.push(newCell);\n            newLayer.push(newCell);\n            layers.push(newLayer);\n            continue;\n        }\n        for (let j = 0; j < emotionCount; j++) {\n            const angle = (360 / emotionCount * j) * Math.PI / 180;\n            const x = Math.cos(angle) * layerDistance * i;\n            const y = Math.sin(angle) * layerDistance * i;\n            const newCell = new _Cell__WEBPACK_IMPORTED_MODULE_0__.Cell(c++, { x, y }, null);\n            let l = dense;\n            for (let k = 0; l > 0 && !spreads; k++) {\n                const angle = (360 / emotionCount * j - ((--l + 1) / (dense + 1) * 360 / emotionCount)) * Math.PI / 180;\n                const x = Math.cos(angle) * layerDistance * i;\n                const y = Math.sin(angle) * layerDistance * i;\n                const newCell = new _Cell__WEBPACK_IMPORTED_MODULE_0__.Cell(c++, { x, y }, null);\n                cells.push(newCell);\n                newLayer.push(newCell);\n            }\n            cells.push(newCell);\n            newLayer.push(newCell);\n        }\n        const lastLayer = layers[i - 1];\n        let l = 0;\n        if (!spreads)\n            for (let j = 0; j < newLayer.length; j++) {\n                const next = newLayer[(j + 1) % newLayer.length];\n                newLayer[j].link(next);\n                if (dense && (j % (dense + 1) !== dense))\n                    continue;\n                l++;\n                if (lastLayer.length == 1)\n                    newLayer[j].link(lastLayer[0]);\n                else\n                    (_a = lastLayer[(j - dense) / (dense + 1) + l * Math.max(0, (dense - 1))]) === null || _a === void 0 ? void 0 : _a.link(newLayer[j]);\n            }\n        else {\n            for (let j = 0; j < newLayer.length; j++) {\n                if (spreadFrom - i === 0)\n                    (_b = lastLayer[j + (dense - 1) + j * Math.max(0, (dense - 1))]) === null || _b === void 0 ? void 0 : _b.link(newLayer[j]);\n                else\n                    (_c = lastLayer[j]) === null || _c === void 0 ? void 0 : _c.link(newLayer[j]);\n            }\n        }\n        layers.push(newLayer);\n    }\n    const lastLayer = layers[layers.length - 1];\n    for (let i = 0; i < lastLayer.length; i++) {\n        const theCell = lastLayer[i];\n        theCell.emotion = emotions[i];\n        for (let j = -1; j <= 1; j += 2) {\n            const angle = (360 / emotionCount * i + j * 3) * Math.PI / 180;\n            const x = Math.cos(angle) * layerDistance * (layerCount + .5);\n            const y = Math.sin(angle) * layerDistance * (layerCount + .5);\n            const newCell = new _Cell__WEBPACK_IMPORTED_MODULE_0__.Cell(c++, { x, y }, emotions[i]);\n            cells.push(newCell);\n            theCell.link(newCell);\n        }\n    }\n};\ngenerateCells();\nconst getCells = () => cells;\n\n\n//# sourceURL=webpack://fav-emotion/./src/generateCells.ts?");

/***/ }),

/***/ "./src/generateEmotions.ts":
/*!*********************************!*\
  !*** ./src/generateEmotions.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   emotionsToDefault: () => (/* binding */ emotionsToDefault),\n/* harmony export */   generateEmotions: () => (/* binding */ generateEmotions),\n/* harmony export */   getEmotions: () => (/* binding */ getEmotions),\n/* harmony export */   regerateColors: () => (/* binding */ regerateColors)\n/* harmony export */ });\n/* harmony import */ var _generateCells__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generateCells */ \"./src/generateCells.ts\");\n/* harmony import */ var _simulation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./simulation */ \"./src/simulation.ts\");\n/* harmony import */ var _stateManagement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stateManagement */ \"./src/stateManagement.ts\");\n\n\n\nconst df = [\n    \"Tranqiulity\",\n    \"Euphoria\",\n    \"Joy\",\n    \"Surprise\",\n    \"Contentment\",\n    \"Excitement\",\n    \"Relief\",\n    \"Love\",\n    \"Pride\",\n    \"Curiosity\",\n];\nconst hslToRgbHex = (h, s, l) => {\n    const c = (1 - Math.abs(2 * l - 1)) * s;\n    const x = c * (1 - Math.abs((h / 60) % 2 - 1));\n    const m = l - c / 2;\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    if (h >= 0 && h < 60) {\n        r = c;\n        g = x;\n        b = 0;\n    }\n    else if (h >= 60 && h < 120) {\n        r = x;\n        g = c;\n        b = 0;\n    }\n    else if (h >= 120 && h < 180) {\n        r = 0;\n        g = c;\n        b = x;\n    }\n    else if (h >= 180 && h < 240) {\n        r = 0;\n        g = x;\n        b = c;\n    }\n    else if (h >= 240 && h < 300) {\n        r = x;\n        g = 0;\n        b = c;\n    }\n    else if (h >= 300 && h < 360) {\n        r = c;\n        g = 0;\n        b = x;\n    }\n    const rHex = Math.floor((r + m) * 255).toString(16).padStart(2, '0');\n    const gHex = Math.floor((g + m) * 255).toString(16).padStart(2, '0');\n    const bHex = Math.floor((b + m) * 255).toString(16).padStart(2, '0');\n    return `#${rHex}${gHex}${bHex}`;\n};\nconst generateColors = (count) => {\n    const step = 360 / count;\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n        colors.push(hslToRgbHex(i * step, 1, .5));\n    }\n    return colors;\n};\nconst generateEmotions = (emotions = df) => {\n    const count = emotions.length;\n    const colors = generateColors(count);\n    return emotions.map((emotion, i) => ({\n        id: i,\n        name: emotion,\n        colour: colors[i],\n        defence: 1,\n        frquency: 1,\n        growth: 1,\n        power: 1,\n        realDefence: 1,\n        realFrequency: 1,\n        realGrowth: 1,\n        realPower: 1\n    }));\n};\nconst emotionsJSON = localStorage.getItem('emotions');\nlet emotions;\nconst regerateColors = () => {\n    const count = emotions.length;\n    const colors = generateColors(count);\n    for (let i = 0; i < count; i++) {\n        emotions[i].colour = colors[i];\n    }\n    (0,_generateCells__WEBPACK_IMPORTED_MODULE_0__.generateCells)();\n    (0,_simulation__WEBPACK_IMPORTED_MODULE_1__.initSimulation)();\n};\ntry {\n    emotions = JSON.parse(emotionsJSON);\n    if (!emotions)\n        throw new Error('No emotions');\n}\ncatch (_a) {\n    emotions = generateEmotions();\n}\nconst emotionsToDefault = () => {\n    const gsSelected = _stateManagement__WEBPACK_IMPORTED_MODULE_2__.gsSelectedEmotion;\n    gsSelected.set(emotions[0]);\n    emotions = generateEmotions();\n    localStorage.setItem('emotions', JSON.stringify(emotions));\n    regerateColors();\n};\nconst getEmotions = () => emotions;\n\n\n//# sourceURL=webpack://fav-emotion/./src/generateEmotions.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _moveAround__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./moveAround */ \"./src/moveAround.ts\");\n/* harmony import */ var _zoom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./zoom */ \"./src/zoom.ts\");\n/* harmony import */ var _generateCells__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./generateCells */ \"./src/generateCells.ts\");\n/* harmony import */ var _renderHTML__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./renderHTML */ \"./src/renderHTML.ts\");\n/* harmony import */ var _simulation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./simulation */ \"./src/simulation.ts\");\nconst fps = 60;\nconst canvas = document.querySelector('canvas');\nconst ctx = canvas.getContext('2d');\n\n\n\n\n\n\nlet { width, height } = canvas;\nconst initTransform = () => {\n    width = document.body.clientWidth;\n    height = document.body.clientHeight;\n    canvas.width = width;\n    canvas.height = height;\n    const shortest = Math.min(width, height);\n    const spaceNeeded = 2 * _generateCells__WEBPACK_IMPORTED_MODULE_2__.layerDistance * (_generateCells__WEBPACK_IMPORTED_MODULE_2__.layerCount + 2);\n    const scale = shortest / spaceNeeded;\n    ctx.transform(scale, 0, 0, scale, width / 2, height / 2);\n};\ninitTransform();\n(0,_zoom__WEBPACK_IMPORTED_MODULE_1__.zoom)(canvas, ctx);\n(0,_moveAround__WEBPACK_IMPORTED_MODULE_0__.moveAround)(canvas, ctx);\nconst draw = () => {\n    const cells = (0,_generateCells__WEBPACK_IMPORTED_MODULE_2__.getCells)();\n    cells.forEach(cell => cell.renderLinks(ctx));\n    cells.forEach(cell => cell.render(ctx));\n};\nwindow.setInterval(() => {\n    // This feels wrong\n    const saveTransform = ctx.getTransform();\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.clearRect(0, 0, width, height);\n    ctx.setTransform(saveTransform);\n    draw();\n}, 1000 / fps);\nwindow.addEventListener('resize', initTransform);\n(0,_renderHTML__WEBPACK_IMPORTED_MODULE_3__.updateDOM)();\n\n\n//# sourceURL=webpack://fav-emotion/./src/index.ts?");

/***/ }),

/***/ "./src/mapValues.ts":
/*!**************************!*\
  !*** ./src/mapValues.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mapDefence: () => (/* binding */ mapDefence),\n/* harmony export */   mapFrequency: () => (/* binding */ mapFrequency),\n/* harmony export */   mapGrowth: () => (/* binding */ mapGrowth),\n/* harmony export */   mapPower: () => (/* binding */ mapPower)\n/* harmony export */ });\nconst mapPower = (power) => {\n    switch (power) {\n        case 1: return 25;\n        case 2: return 29;\n        case 3: return 33;\n        case 4: return 37;\n        case 5: return 41;\n    }\n};\nconst mapDefence = (defence) => {\n    switch (defence) {\n        case 1: return 30;\n        case 2: return 34;\n        case 3: return 38;\n        case 4: return 42;\n        case 5: return 46;\n    }\n};\nconst mapFrequency = (frequency) => {\n    switch (frequency) {\n        case 1: return 15;\n        case 2: return 14;\n        case 3: return 13;\n        case 4: return 12;\n        case 5: return 11;\n    }\n};\nconst mapGrowth = (growth) => {\n    switch (growth) {\n        case 1: return .12;\n        case 2: return .26;\n        case 3: return .24;\n        case 4: return .30;\n        case 5: return .36;\n    }\n};\n\n\n\n//# sourceURL=webpack://fav-emotion/./src/mapValues.ts?");

/***/ }),

/***/ "./src/moveAround.ts":
/*!***************************!*\
  !*** ./src/moveAround.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   moveAround: () => (/* binding */ moveAround)\n/* harmony export */ });\nconst sesnitivity = -0.4;\nconst scaleFactor = 1 - 0.1;\nconst moveAround = (el, ctx) => {\n    let pointerDown = false;\n    let startPos = { x: 0, y: 0 };\n    el.addEventListener('mousedown', (e) => {\n        pointerDown = true;\n        startPos = { x: e.clientX, y: e.clientY };\n    });\n    el.addEventListener('mousemove', (e) => {\n        if (pointerDown) {\n            const ctxTransform = ctx.getTransform();\n            const ctxScale = ctxTransform.a;\n            const currentTransformX = ctxTransform.e;\n            const currentTransformY = ctxTransform.f;\n            const newTransformX = currentTransformX - (e.clientX - startPos.x) * sesnitivity;\n            const newTransformY = currentTransformY - (e.clientY - startPos.y) * sesnitivity;\n            ctx.setTransform(ctxScale, 0, 0, ctxScale, newTransformX, newTransformY);\n            startPos = { x: e.clientX, y: e.clientY };\n        }\n    });\n    // special kid\n    el.onmouseleave = () => {\n        pointerDown = false;\n    };\n    el.addEventListener('mouseup', (e) => {\n        pointerDown = false;\n    });\n};\n\n\n//# sourceURL=webpack://fav-emotion/./src/moveAround.ts?");

/***/ }),

/***/ "./src/renderHTML.ts":
/*!***************************!*\
  !*** ./src/renderHTML.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   updateDOM: () => (/* binding */ updateDOM),\n/* harmony export */   updateSimulationStats: () => (/* binding */ updateSimulationStats)\n/* harmony export */ });\n/* harmony import */ var _generateCells__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generateCells */ \"./src/generateCells.ts\");\n/* harmony import */ var _generateEmotions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generateEmotions */ \"./src/generateEmotions.ts\");\n/* harmony import */ var _stateManagement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stateManagement */ \"./src/stateManagement.ts\");\n\n\n\nconst emotionDetails = document.querySelector(\".emotion-details\");\nconst emotionName = emotionDetails.querySelector(\"h3\");\nconst [powerSpan, defenceSpan, frequencySpan, growthSpan] = Array.from(emotionDetails.querySelectorAll(\"span\"));\nconst [powerBar, defenceBar, frequencyBar, growthBar] = Array.from(emotionDetails.querySelectorAll(\"input\"));\nconst emotionList = document.querySelector(\".emotion-list\");\nconst emotionListInner = emotionList.querySelector(\".list\");\nconst addRemove = document.querySelector(\".add-remove\");\nconst newEmotionInput = addRemove.querySelector(\"input\");\nconst addEmotionButton = addRemove.querySelector(\"#add-emotion\");\nconst removeEmotionButton = addRemove.querySelector(\"#remove-emotion\");\nconst playPauseButton = document.querySelector(\"#play-pause\");\nconst resetButton = document.querySelector(\"#reset\");\nconst defaultEmotionsButton = document.querySelector(\"#default-emotions\");\nconst hideGuiButton = document.querySelector(\"#hide-gui\");\nconst simulationStats = document.querySelector(\".simulation-stats\");\nconst phoneOverlay = document.querySelector(\".phone-overlay\");\nlet guiHidden = window.innerWidth < 786;\nhideGuiButton.textContent = guiHidden ? 'Edit Emotions' : 'Close';\nconst updateEmotionDetails = () => {\n    if (guiHidden) {\n        emotionDetails.classList.add('hidden');\n        return;\n    }\n    emotionDetails.classList.remove('hidden');\n    const emotion = _stateManagement__WEBPACK_IMPORTED_MODULE_2__.gsSelectedEmotion.get();\n    emotionName.textContent = emotion.name;\n    emotionName.style.color = emotion.colour;\n    document.documentElement.style.setProperty('--slider-color', emotion.colour);\n    powerSpan.textContent = emotion.power.toString() + '/5';\n    defenceSpan.textContent = emotion.defence.toString() + '/5';\n    frequencySpan.textContent = emotion.frquency.toString() + '/5';\n    growthSpan.textContent = emotion.growth.toString() + '/5';\n    powerBar.value = emotion.power.toString();\n    defenceBar.value = emotion.defence.toString();\n    frequencyBar.value = emotion.frquency.toString();\n    growthBar.value = emotion.growth.toString();\n    const firstStart = (0,_stateManagement__WEBPACK_IMPORTED_MODULE_2__.getFirstStart)();\n    if (!firstStart)\n        emotionDetails.classList.add('blocked');\n    else\n        emotionDetails.classList.remove('blocked');\n};\nconst updateEmotionList = () => {\n    if (guiHidden) {\n        emotionList.classList.add('hidden');\n        return;\n    }\n    emotionList.classList.remove('hidden');\n    const emotions = (0,_generateEmotions__WEBPACK_IMPORTED_MODULE_1__.getEmotions)();\n    emotionListInner.innerHTML = '';\n    emotions.forEach(emotion => {\n        const p = document.createElement('p');\n        p.textContent = emotion.name;\n        if (emotion.id === _stateManagement__WEBPACK_IMPORTED_MODULE_2__.gsSelectedEmotion.get().id)\n            p.classList.add('selected');\n        p.addEventListener('click', () => {\n            _stateManagement__WEBPACK_IMPORTED_MODULE_2__.gsSelectedEmotion.set(emotion);\n            updateDOM();\n        });\n        emotionListInner.appendChild(p);\n    });\n};\nconst addEmotion = () => {\n    if (!newEmotionInput.value)\n        return;\n    const name = newEmotionInput.value;\n    newEmotionInput.value = '';\n    const emotions = (0,_generateEmotions__WEBPACK_IMPORTED_MODULE_1__.getEmotions)();\n    emotions.push({\n        id: new Date().getTime(),\n        name,\n        colour: '#000000',\n        power: 1,\n        defence: 1,\n        frquency: 1,\n        growth: 1,\n        realPower: 1,\n        realDefence: 1,\n        realFrequency: 1,\n        realGrowth: 1\n    });\n    (0,_generateEmotions__WEBPACK_IMPORTED_MODULE_1__.regerateColors)();\n    (0,_stateManagement__WEBPACK_IMPORTED_MODULE_2__.storeEmotions)();\n    updateDOM();\n};\nconst updateAddRemove = () => {\n    const firstStart = (0,_stateManagement__WEBPACK_IMPORTED_MODULE_2__.getFirstStart)();\n    addEmotionButton.disabled = !newEmotionInput.value || !firstStart;\n    removeEmotionButton.disabled = (0,_generateEmotions__WEBPACK_IMPORTED_MODULE_1__.getEmotions)().length === 3 || !firstStart;\n    defaultEmotionsButton.disabled = !firstStart;\n};\nconst updateSimulationStats = () => {\n    const cells = (0,_generateCells__WEBPACK_IMPORTED_MODULE_0__.getCells)();\n    const cellNum = cells.length;\n    const emotions = (0,_generateEmotions__WEBPACK_IMPORTED_MODULE_1__.getEmotions)();\n    const emotionStats = emotions.map(emotion => {\n        return {\n            num: cells.filter(cell => { var _a; return ((_a = cell.emotion) === null || _a === void 0 ? void 0 : _a.id) === emotion.id; }).length,\n            emotion\n        };\n    }).sort((a, b) => b.num - a.num);\n    simulationStats.innerHTML = '';\n    for (const { num, emotion } of emotionStats) {\n        const p = document.createElement('p');\n        const span = document.createElement('span');\n        span.textContent = num.toString();\n        span.style.backgroundColor = emotion.colour + '88';\n        const selected = _stateManagement__WEBPACK_IMPORTED_MODULE_2__.gsSelectedEmotion.get();\n        if (emotion == selected)\n            p.style.fontWeight = 'bold';\n        p.textContent = emotion.name + ': ';\n        p.appendChild(span);\n        p.appendChild(document.createTextNode(` (${(num / cellNum * 100).toFixed(2)}%)`));\n        simulationStats.appendChild(p);\n    }\n};\nconst updateDOM = () => {\n    updateEmotionDetails();\n    updateEmotionList();\n    updateAddRemove();\n    updateSimulationStats();\n};\npowerBar.addEventListener('change', () => {\n    const emotion = _stateManagement__WEBPACK_IMPORTED_MODULE_2__.gsSelectedEmotion.get();\n    emotion.power = parseInt(powerBar.value);\n    _stateManagement__WEBPACK_IMPORTED_MODULE_2__.gsSelectedEmotion.set(emotion);\n    updateEmotionDetails();\n    (0,_stateManagement__WEBPACK_IMPORTED_MODULE_2__.storeEmotions)();\n});\ndefenceBar.addEventListener('change', () => {\n    const emotion = _stateManagement__WEBPACK_IMPORTED_MODULE_2__.gsSelectedEmotion.get();\n    emotion.defence = parseInt(defenceBar.value);\n    _stateManagement__WEBPACK_IMPORTED_MODULE_2__.gsSelectedEmotion.set(emotion);\n    updateEmotionDetails();\n    (0,_stateManagement__WEBPACK_IMPORTED_MODULE_2__.storeEmotions)();\n});\nfrequencyBar.addEventListener('change', () => {\n    const emotion = _stateManagement__WEBPACK_IMPORTED_MODULE_2__.gsSelectedEmotion.get();\n    emotion.frquency = parseInt(frequencyBar.value);\n    _stateManagement__WEBPACK_IMPORTED_MODULE_2__.gsSelectedEmotion.set(emotion);\n    updateEmotionDetails();\n    (0,_stateManagement__WEBPACK_IMPORTED_MODULE_2__.storeEmotions)();\n});\ngrowthBar.addEventListener('change', () => {\n    const emotion = _stateManagement__WEBPACK_IMPORTED_MODULE_2__.gsSelectedEmotion.get();\n    emotion.growth = parseInt(growthBar.value);\n    _stateManagement__WEBPACK_IMPORTED_MODULE_2__.gsSelectedEmotion.set(emotion);\n    updateEmotionDetails();\n    (0,_stateManagement__WEBPACK_IMPORTED_MODULE_2__.storeEmotions)();\n});\nnewEmotionInput.addEventListener('input', updateAddRemove);\nnewEmotionInput.addEventListener('keydown', (e) => {\n    if (!(0,_stateManagement__WEBPACK_IMPORTED_MODULE_2__.getFirstStart)())\n        return;\n    if (e.key === 'Enter')\n        addEmotion();\n});\naddEmotionButton.addEventListener('click', addEmotion);\nremoveEmotionButton.addEventListener('click', () => {\n    const emotions = (0,_generateEmotions__WEBPACK_IMPORTED_MODULE_1__.getEmotions)();\n    const index = emotions.findIndex(e => e.id === _stateManagement__WEBPACK_IMPORTED_MODULE_2__.gsSelectedEmotion.get().id);\n    emotions.splice(index, 1);\n    _stateManagement__WEBPACK_IMPORTED_MODULE_2__.gsSelectedEmotion.set(emotions[0]);\n    (0,_generateEmotions__WEBPACK_IMPORTED_MODULE_1__.regerateColors)();\n    (0,_stateManagement__WEBPACK_IMPORTED_MODULE_2__.storeEmotions)();\n    updateDOM();\n});\nplayPauseButton.addEventListener('click', () => {\n    if ((0,_stateManagement__WEBPACK_IMPORTED_MODULE_2__.getRunning)())\n        (0,_stateManagement__WEBPACK_IMPORTED_MODULE_2__.pause)();\n    else\n        (0,_stateManagement__WEBPACK_IMPORTED_MODULE_2__.start)();\n    playPauseButton.textContent = (0,_stateManagement__WEBPACK_IMPORTED_MODULE_2__.getRunning)() ? 'Pause' : 'Resume';\n});\nresetButton.addEventListener('click', () => {\n    (0,_stateManagement__WEBPACK_IMPORTED_MODULE_2__.reset)();\n    playPauseButton.textContent = 'Start';\n});\ndefaultEmotionsButton.addEventListener('click', () => {\n    (0,_generateEmotions__WEBPACK_IMPORTED_MODULE_1__.emotionsToDefault)();\n    updateDOM();\n});\nhideGuiButton.addEventListener('click', () => {\n    guiHidden = !guiHidden;\n    hideGuiButton.textContent = guiHidden ? 'Edit Emotions' : 'Close';\n    phoneOverlay.classList.toggle('hidden');\n    updateDOM();\n});\n\n\n//# sourceURL=webpack://fav-emotion/./src/renderHTML.ts?");

/***/ }),

/***/ "./src/simulation.ts":
/*!***************************!*\
  !*** ./src/simulation.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initSimulation: () => (/* binding */ initSimulation)\n/* harmony export */ });\n/* harmony import */ var _generateCells__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generateCells */ \"./src/generateCells.ts\");\n/* harmony import */ var _generateEmotions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generateEmotions */ \"./src/generateEmotions.ts\");\n/* harmony import */ var _renderHTML__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./renderHTML */ \"./src/renderHTML.ts\");\n/* harmony import */ var _stateManagement__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stateManagement */ \"./src/stateManagement.ts\");\n\n\n\n\nconst ticksPerSecond = 10;\nlet emotions = [];\nlet ticksLeft = [];\nconst growthCD = 10;\nlet growthCounter = 0;\nconst initSimulation = () => {\n    emotions = (0,_generateEmotions__WEBPACK_IMPORTED_MODULE_1__.getEmotions)();\n    ticksLeft = emotions.map(emotion => ({ num: emotion.realFrequency, emotion }));\n};\nsetInterval(() => {\n    const running = (0,_stateManagement__WEBPACK_IMPORTED_MODULE_3__.getRunning)();\n    if (!running)\n        return;\n    const cells = (0,_generateCells__WEBPACK_IMPORTED_MODULE_0__.getCells)();\n    emotions = (0,_generateEmotions__WEBPACK_IMPORTED_MODULE_1__.getEmotions)();\n    const attackedCells = [];\n    growthCounter++;\n    if (growthCounter === growthCD) {\n        growthCounter = 0;\n        emotions.forEach(emotion => {\n            emotion.realPower += emotion.realGrowth;\n        });\n    }\n    ticksLeft.forEach(tl => {\n        tl.num--;\n        if (tl.num === 0) {\n            tl.num = tl.emotion.realFrequency;\n            const ownedCells = cells.filter(cell => cell.emotion === tl.emotion);\n            ownedCells.forEach(cell => {\n                cell.links.forEach(link => {\n                    const targetCell = link.cell;\n                    // if owned by the same emotion, ignore\n                    if (targetCell.emotion === tl.emotion)\n                        return;\n                    if (targetCell.immune > 0) {\n                        targetCell.immune--;\n                        return;\n                    }\n                    const critical = Math.random() < tl.emotion.realGrowth;\n                    const damage = critical ? tl.emotion.realPower * 1.6 : tl.emotion.realPower;\n                    const alreadyAttacked = attackedCells.find(ac => ac.cell === targetCell);\n                    if (alreadyAttacked) {\n                        const alreadyAttackedByThisEmotion = alreadyAttacked.damageDealt.find(dd => dd.by === tl.emotion);\n                        if (alreadyAttackedByThisEmotion) {\n                            alreadyAttackedByThisEmotion.amount += damage;\n                        }\n                        else {\n                            alreadyAttacked.damageDealt.push({ by: tl.emotion, amount: damage });\n                        }\n                    }\n                    else {\n                        attackedCells.push({ cell: targetCell, damageDealt: [{ by: tl.emotion, amount: damage }] });\n                    }\n                });\n            });\n        }\n    });\n    attackedCells.forEach(ac => {\n        var _a;\n        let shield = ((_a = ac.cell.emotion) === null || _a === void 0 ? void 0 : _a.realDefence) || 0;\n        const emotion = ac.cell.emotion;\n        if (emotion != null) {\n            ac.cell.links.forEach(link => {\n                if (link.cell.emotion === ac.cell.emotion) {\n                    shield += emotion.realDefence * 0.2;\n                }\n            });\n        }\n        const greatestAttack = ac.damageDealt.reduce((prev, current) => prev.amount > current.amount ? prev : current);\n        if (shield < greatestAttack.amount) {\n            ac.cell.emotion = greatestAttack.by;\n            const { power, defence, frquency, growth } = ac.cell.emotion;\n            ac.cell.immune = Math.trunc((power + defence + frquency + growth) / 4);\n        }\n    });\n    if (attackedCells.length > 0) {\n        (0,_renderHTML__WEBPACK_IMPORTED_MODULE_2__.updateSimulationStats)();\n    }\n}, 1000 / ticksPerSecond);\n\n\n//# sourceURL=webpack://fav-emotion/./src/simulation.ts?");

/***/ }),

/***/ "./src/stateManagement.ts":
/*!********************************!*\
  !*** ./src/stateManagement.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFirstStart: () => (/* binding */ getFirstStart),\n/* harmony export */   getRunning: () => (/* binding */ getRunning),\n/* harmony export */   gsSelectedEmotion: () => (/* binding */ gsSelectedEmotion),\n/* harmony export */   pause: () => (/* binding */ pause),\n/* harmony export */   reset: () => (/* binding */ reset),\n/* harmony export */   start: () => (/* binding */ start),\n/* harmony export */   storeEmotions: () => (/* binding */ storeEmotions)\n/* harmony export */ });\n/* harmony import */ var _generateCells__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generateCells */ \"./src/generateCells.ts\");\n/* harmony import */ var _generateEmotions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generateEmotions */ \"./src/generateEmotions.ts\");\n/* harmony import */ var _mapValues__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mapValues */ \"./src/mapValues.ts\");\n/* harmony import */ var _renderHTML__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./renderHTML */ \"./src/renderHTML.ts\");\n/* harmony import */ var _simulation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./simulation */ \"./src/simulation.ts\");\n\n\n\n\n\nconst emotions = (0,_generateEmotions__WEBPACK_IMPORTED_MODULE_1__.getEmotions)();\nlet selectedEmotion = emotions[0];\nconst gsSelectedEmotion = { get: () => selectedEmotion, set: (e) => selectedEmotion = e };\nconst storeEmotions = () => {\n    localStorage.setItem('emotions', JSON.stringify(emotions));\n};\nlet firstStart = true;\nlet running = false;\nconst getRunning = () => running;\nconst getFirstStart = () => firstStart;\nconst start = () => {\n    running = true;\n    if (firstStart) {\n        firstStart = false;\n        const emotions = (0,_generateEmotions__WEBPACK_IMPORTED_MODULE_1__.getEmotions)();\n        emotions.forEach(e => {\n            e.realPower = (0,_mapValues__WEBPACK_IMPORTED_MODULE_2__.mapPower)(e.power);\n            e.realFrequency = (0,_mapValues__WEBPACK_IMPORTED_MODULE_2__.mapFrequency)(e.frquency);\n            e.realDefence = (0,_mapValues__WEBPACK_IMPORTED_MODULE_2__.mapDefence)(e.defence);\n            e.realGrowth = (0,_mapValues__WEBPACK_IMPORTED_MODULE_2__.mapGrowth)(e.growth);\n        });\n        (0,_simulation__WEBPACK_IMPORTED_MODULE_4__.initSimulation)();\n        (0,_renderHTML__WEBPACK_IMPORTED_MODULE_3__.updateDOM)();\n    }\n};\nconst pause = () => {\n    running = false;\n};\nconst reset = () => {\n    running = false;\n    firstStart = true;\n    (0,_generateCells__WEBPACK_IMPORTED_MODULE_0__.generateCells)();\n    (0,_renderHTML__WEBPACK_IMPORTED_MODULE_3__.updateDOM)();\n};\n\n\n\n//# sourceURL=webpack://fav-emotion/./src/stateManagement.ts?");

/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   easeOut: () => (/* binding */ easeOut)\n/* harmony export */ });\nconst easeOut = (set, start, stop, duration = .5) => {\n    const change = Math.abs(stop - start);\n    const negative = stop < start;\n    const startTime = Date.now();\n    let progression = 0;\n    let timeProgression = 0;\n    let cancel = () => { };\n    const intervalID = setInterval(() => {\n        timeProgression = (Date.now() - startTime) / 1000 / duration;\n        progression = 1 - (1 - timeProgression) * (1 - timeProgression);\n        if (timeProgression >= 1) {\n            set(stop);\n            cancel();\n            return;\n        }\n        ;\n        set(start + change * progression * (negative ? -1 : 1));\n    }, 1000 / 60);\n    cancel = () => clearInterval(intervalID);\n    return cancel;\n};\n\n\n//# sourceURL=webpack://fav-emotion/./src/utils.ts?");

/***/ }),

/***/ "./src/zoom.ts":
/*!*********************!*\
  !*** ./src/zoom.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   zoom: () => (/* binding */ zoom)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./src/utils.ts\");\n\n// for the love of god, please don't look at this code\nconst scaleFactor = 1 - .38;\nconst zoom = (canvas, ctx) => {\n    let cancelLastEase = () => { };\n    const cursor = { x: 0, y: 0 };\n    const gsCursor = {\n        get: () => cursor,\n        set: (v) => {\n            cursor.x = v.x;\n            cursor.y = v.y;\n        }\n    };\n    let scale = ctx.getTransform().a;\n    const gsScale = {\n        get: () => scale,\n        set: (s) => {\n            const { e, f } = ctx.getTransform();\n            const offsetX = e;\n            const offsetY = f;\n            const cursorX = gsCursor.get().x;\n            const cursorY = gsCursor.get().y;\n            const newOffsetX = cursorX - (cursorX - offsetX) * (s / scale);\n            const newOffsetY = cursorY - (cursorY - offsetY) * (s / scale);\n            scale = s;\n            ctx.setTransform(s, 0, 0, s, newOffsetX, newOffsetY);\n        }\n    };\n    canvas.addEventListener('wheel', (e) => {\n        e.preventDefault();\n        cancelLastEase();\n        const oldScale = gsScale.get();\n        const newScale = oldScale * (e.deltaY > 0 ? scaleFactor : 1 / scaleFactor);\n        const cursorX = e.clientX - canvas.getBoundingClientRect().left;\n        const cursorY = e.clientY - canvas.getBoundingClientRect().top;\n        gsCursor.set({ x: cursorX, y: cursorY });\n        cancelLastEase = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.easeOut)(gsScale.set, oldScale, newScale);\n    });\n    // make the mobile experience less bad ✅\n    // add hide gui button ✅\n    // make move and zoom work for mobile ✅\n    // try to make things look better, less rigid\n    // make ticksleft update when emotions are added or removed ✅\n    // add reset button ✅\n    // add default settings button ✅\n    // add a little window that shows the number of occupied cells by each emotion ✅\n    // gray out emotion settings while simulation is running ✅\n    // we got the product!!!! 🎉🎉🎉🎉🎉\n};\n\n\n//# sourceURL=webpack://fav-emotion/./src/zoom.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;